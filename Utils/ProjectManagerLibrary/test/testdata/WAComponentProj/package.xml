<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
 Copyright 2013 Microsoft Open Technologies, Inc.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
--><project basedir="." default="createwapackage" name="WAComponentProj">

  <!-- This task is used for storing properties specific to Windows Azure cloud service project -->
  <target description="Stores properties used by Windows Azure project" name="waprojectproperties">
    <property name="project.enableremoteaccess" value="true"/>

    <!-- NOTE: The certificate with the thumbprint 875F1656A34D93B266E71BF19C116C39F16B6987 refers to
		the SampleRemoteDesktopPrivate.pfx/.cer certificate files included with the Windows Azure Starter Kit for Java.
		When you upload the .pfx certificate to Windows Azure, you need to provide the following password: Password1
		Note this certificate password is *publicly known* so you should not use this sample certificate for anything
		other than educational purposes only. To generate your own self-signed certificate (.pfx and .cer) you can use
		encutil.exe from wastarterkit4java.codeplex.com.  You may delete this comment after you stop referencing this
		sample certificate. -->
    <property name="cert.windowsazureremotedesktop" value="${basedir}\cert\SampleRemoteAccessPublic.cer"/>
    <property name="creator.version" value="2.0.1"/>
  <property name="project.WorkerRole1.server" value="Apache Tomcat 7"/>
  <property name="project.WorkerRole4.server" value="GlassFish OSE 3"/>
  <property name="project.WorkerRole5.jdk.home.cloud" value="%ROLEROOT%\approot\jdk1.7.0"/>
  </target>

  <!-- Force emulator reset to ensure no locks on deploy directory -->
  <target name="checkResetScript">
    <available file="${basedir}\emulatorTools\ResetEmulator.cmd" property="fileExists"/>
  </target>
  <target depends="checkResetScript" if="fileExists" name="resetEmulator">
    <exec executable="${basedir}\emulatorTools\ResetEmulator.cmd" failifexecutionfails="false"/>
  </target>

  <!-- This task creates a Windows Azure cloud service package -->
  <target depends="resetEmulator" description="Creates a Windows Azure package" name="createwapackage">
    <taskdef classname="com.microsoftopentechnologies.windowsazure.tools.build.WindowsAzurePackage" classpath="${basedir}\.cspack.jar" name="windowsazurepackage"/>

    <!-- This is the directory where the Windows Azure deployment package or folder will be saved -->
    <property location="${basedir}\deploy" name="wapackagedir"/>

    <move failonerror="false" file="${wapackagedir}" overwrite="true" tofile="${wapackagedir}.old"/>
    <mkdir dir="${wapackagedir}"/>

    <parallel failonany="true">
      <delete dir="${wapackagedir}.old" includeemptydirs="true"/>

      <!-- Create a Windows Azure deployment package

			Attributes:

			packagefilename:
					(Required) The name, including the extension but not the full path, of the deployment package or
					folder to be built. By convention, if creating a package file for deployment to the cloud
					(packagetype="cloud"), use the *.cspkg extension. If creating only a directory layout for local
					testing in the development fabric (packagetype="True"), use the *.csx extension.

			[configurationfilename]:
					The name, including the extension but not the full path, of the cloud service configuration file (*.cscfg).
					This file must exist in the root directory of the project (see the projectDir attribute).
					If not specified, the default name "ServiceConfiguration.cscfg" will be assumed.

			[definitionfilename]:
					The name, including the extension but not the full path, of the cloud service definition file (*.csdef).
					This file must exist in the root directory of the project (see the projectdir attribute).
					If not specified, the default name "ServiceDefinition.csdef" is assumed.

			[emulatortoolsdir]:
					The directory where the emulator tools will be created by the build process.
					If not specified, the default "emulatorTools" directory in the project directory
					will be used.

			[packagedir]:
					The target directory of the deployment package file or folder.
					If not specified, "<projectdir>/deploy" will be used.

			[packagetype = {cloud | local}]
					cloud:	(default) Builds a package file for deployment to the Windows Azure cloud, for example via the Windows
							Azure management portal.
					local:	Creates a package directory layout for local testing in the Windows Azure Compute
							Emulator and a command script (csrun.cmd) for you to start your cloud service in the development
							fabric more easily.

			[projectdir]:
					The root directory of the project. The service definition (*.csdef) and service configuration (*.cscfg)
					files are expected to exist there. If not specified, the task will attempt to determine the project
					directory automatically.

			[sdkdir]:
					The directory of the cspack.exe tool. If not specified, an attempt will be made to find it automatically.

			[emulatordir]:
					The directory of the Windows Azure Emulator installation. If not specified, an attempt will be made to find it automatically.

			-->
      <windowsazurepackage configurationfilename="ServiceConfiguration.cscfg" definitionfilename="ServiceDefinition.csdef" packagedir="${wapackagedir}" packagefilename="WindowsAzurePackage.cspkg" packagetype="local" projectdir="${basedir}">

        <!-- Create a sample role -->
        <workerrole approotdir="${basedir}\WorkerRole1\approot" name="WorkerRole1">




          <!-- Define a Windows Azure role component. i.e. a file or directory to be included in the approot and deployed in
					Windows Azure based on the specified settings. A component can also represent a commandline when used with deploymethod='exec'

					Attributes:

					[importsrc]:
							The file or directory path from which the component will be imported, relative to approot.

					[importmethod = {none | copy | zip | auto}]:
							none:	(default) No import action is taken. The component is assumed to be already in the approot or to be a commandline.
							auto:	The same as 'none', but this value could be overloaded by external builders to have special meaning.
							copy: 	Copies from the path provided in importsrc into the approot.
							zip:	Zips the file or directory at the path provided in importsrc and places the zip file into the approot.

					[importas]:
							The name under which the component will be imported into the approot. It can be a directory name if importing
							a directory, or a file name if importing files. If not specified and no importmethod is 'none', then this is
							assumed to be the same as importsrc

					[deploymethod = {none | copy | unzip | exec}]:
							none:	(default) No deployment action is taken.
							copy:	Copies the file or directory specified by importas from the approot into the directory specified by deploydir
							unzip:	Unzips the file specified by importas from the approot into the directory specified by deploydir
							exec:	Interprets importas as a command line and executes it during deployment in the working directory specified by deploydir

					[deploydir]:
							The directory, relative to approot, where the component will be deployed from approot based on deploymethod.
						-->


        <component importas="HelloWorld.war"/>
        </workerrole>

        <!-- $TODO: To add more roles, copy and paste the workerrole element for each new role
				 and modify the required settings:
					name:		Must match the "name" attribute from WorkerRole element from the service definition (.csdef) file
					approot:	The directory with the files and directories to include in the package (e.g. JRE, server
								deployment, .war files, etc). After deployment, the contents of this folder will be available
								the role instance's approot directory.
			-->
      <workerrole approotdir="${basedir}\WorkerRole2\approot" name="WorkerRole2">
          <startupenv name="JAVA_HOME" type="jdk.home" value="\%ROLENAME%\jdk"/>
          <startupenv name="PATH" type="jdk.path" value="%PATH%;%JAVA_HOME%\bin"/>
	      <component cloudkey="/AxKCsqVAiNFkIMBYc1k4BoQhn/6NAHqrAXjhYQYIfjEMbYN3M/PZltzRIEqSCSq/xPH6XefYaxqOJH3HRIBsg==" cloudmethod="unzip" cloudsrc="https://interopdemosteststore.blob.core.windows.net/temp/jdk.zip" importas="jdk" importmethod="copy" importsrc="C:\Program Files\Java\jdk1.6.0_05" type="jdk.deploy"/>
          <component deploydir=".\" deploymethod="unzip" importas="xcopy.zip" importmethod="copy" importsrc="D:\xcopy.zip"/>
      	  <component deploydir=".\" deploymethod="none" importas="serverApp.war" importmethod="none" type="server.app"/>
        </workerrole>
      <workerrole approotdir="${basedir}\WorkerRole3\approot" name="WorkerRole3">
      	<component deploydir=".\" deploymethod="none" importas="error.war" importmethod="none"/>
      	</workerrole>
      <workerrole approotdir="${basedir}\WorkerRole4\approot" name="WorkerRole4">
          <startupenv name="JAVA_HOME" type="jdk.home" value="\%ROLENAME%\jdk"/>
          <startupenv name="PATH" type="jdk.path" value="%PATH%;%JAVA_HOME%\bin"/>
          <component importas="jdk" importmethod="copy" importsrc="C:\Program Files\Java\jdk1.6.0_05" type="jdk.deploy"/>
          <startupenv name="GLASSFISH_HOME" type="server.home" value="\%ROLENAME%\glassfish3\glassfish"/>
          <startupenv name="SERVER_APPS_LOCATION" type="server.app.loc" value="%GLASSFISH_HOME%\domains\domain1\autodeploy"/>
          <component importmethod="copy" importsrc="C:\glassfish3" type="server.deploy"/>
          <component deploydir="%GLASSFISH_HOME%\bin" deploymethod="exec" importas="asadmin.bat start-domain" type="server.start"/>
        </workerrole>
      <workerrole approotdir="${basedir}\WorkerRole5\approot" name="WorkerRole5">
          <startupenv name="JAVA_HOME" type="jdk.home" value="%ROLEROOT%\approot\jdk1.7.0_09"/>
          <startupenv name="PATH" type="jdk.path" value="%JAVA_HOME%\bin;%PATH%"/>
          <component cloudmethod="unzip" cloudsrc="http://prajstrtest.blob.core.windows.net/prajakta/jdk1.7.0.zip" importmethod="copy" importsrc="C:\Program Files\Java\jdk1.7.0_09" type="jdk.deploy"/>
        </workerrole>
      </windowsazurepackage>
    </parallel>

  </target>

</project>
